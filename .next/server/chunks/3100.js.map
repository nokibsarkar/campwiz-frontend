{"version":3,"file":"3100.js","mappings":"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","sources":["webpack://campwiz-frontend/./types/round/create.ts","webpack://campwiz-frontend/?21b1","webpack://campwiz-frontend/./app/campaign/[campaignId]/RoundEdit.tsx","webpack://campwiz-frontend/./components/LoadingPopup.tsx"],"sourcesContent":["import dayjs from \"dayjs\"\nimport { EvaluationType, MediaType, RoundCreate } from \".\"\n\nexport const initialRoundCreate: RoundCreate = {\n    allowedMediaTypes: [\n        MediaType.IMAGE,\n        MediaType.AUDIO,\n        MediaType.VIDEO,\n    ],\n    type: EvaluationType.BINARY,\n    startDate: dayjs().toISOString(),\n    endDate: dayjs().toISOString(),\n    name: \"\",\n    description: \"\",\n    isPublicJury: false,\n    allowJuryToParticipate: true,\n    campaignId: \"\", // Add appropriate initial value\n    jury: [], // Add appropriate initial value\n    isOpen: false,\n    serial: 0,\n    allowMultipleJudgement: true,\n    secretBallot: true,\n    blacklist: \"\",\n    audioMinimumDurationMilliseconds: 0,\n    audioMinimumSizeBytes: 0,\n    videoMinimumDurationMilliseconds: 0,\n    videoMinimumSizeBytes: 0,\n    videoMinimumResolution: 0,\n    imageMinimumResolution: 2000000, // 2MP\n    imageMinimumSizeBytes: 0,\n    maximumSubmissionOfSameArticle: 1,\n    articleAllowExpansions: true,\n    articleAllowCreations: true,\n    articleMinimumTotalBytes: 0,\n    articleMinimumTotalWords: 0,\n    articleMinimumAddedBytes: 0,\n    articleMinimumAddedWords: 0,\n    quorum: 1,\n}\n\nexport const roundCreateReducer = (state: RoundCreate, action: Partial<RoundCreate>) => {\n    return {\n        ...state,\n        ...action\n    }\n}\nexport type RoundCreateAction = Partial<RoundCreate>\nexport type RoundCreateDispatch = (action: RoundCreateAction) => void","import { createServerReference, callServer, findSourceMapURL } from 'private-next-rsc-action-client-wrapper'\nexport const updateRound = /*#__PURE__*/createServerReference(\"7f6f301c9474ce02cc290e0a672a1fae0004d9cb0a\", callServer, undefined, findSourceMapURL, \"updateRound\")","\"use client\";\nimport { Button, CircularProgress, Dialog, DialogActions, DialogContent, DialogTitle, Typography } from \"@mui/material\"\nimport { updateRound } from \"@/app/campaign/[campaignId]/round/new/action\"\nimport React, { lazy, useCallback, useMemo, useReducer, useState } from \"react\";\nimport { roundCreateReducer } from \"@/types/round/create\";\nimport { Round } from \"@/types/round\";\nimport LoadingPopup from \"@/components/LoadingPopup\";\nconst RoundEditForm = lazy(() => import(\"@/components/round/RoundEditForm\"));\nimport Slide from '@mui/material/Slide';\nimport { TransitionProps } from '@mui/material/transitions';\nimport DistributionDialog from \"./round/distribute/DistributionWidget\";\n\nconst Transition = React.forwardRef(function Transition(\n    props: TransitionProps & {\n        children: React.ReactElement<unknown, typeof Slide>;\n    },\n    ref: React.Ref<unknown>,\n) {\n    return <Slide direction=\"up\" ref={ref} {...props} />;\n});\nenum Stage {\n    EDIT = 'edit',\n    DISTRIBUTE = 'distribute',\n    DISTRIBUTING = 'distributing',\n    SUCCESS = 'success'\n}\nconst EditDialog = ({ campaignId, onClose, existingRound, setUpdatedRound, setStage }: { campaignId: string, onClose: () => void, existingRound: Round, setUpdatedRound: (round: Round) => void, setStage: (stage: Stage) => void }) => {\n    const [round, roundDispatch] = useReducer(roundCreateReducer, { ...existingRound, jury: Object.values(existingRound?.jury || {}), campaignId });\n    const [loading, setLoading] = useState(false);\n    const [error, setError] = useState<string | null>(null);\n\n\n    // Detect whether the jury has changed\n    const needRedistribution = useMemo(() => {\n        // public jury does not need redistribution\n        if (round.isPublicJury) {\n            return false;\n        }\n        if (existingRound.quorum !== round.quorum) {\n            return true;\n        }\n        const existingJury = new Set(Object.values(existingRound.jury || {}))\n        if (round.jury.length !== existingJury.size) {\n            return true;\n        }\n        const newJury = new Set(round.jury || [])\n        const intersection = existingJury.intersection(newJury);\n        return intersection.size !== existingJury.size;\n    }, [existingRound.jury, existingRound.quorum, round.isPublicJury, round.jury, round.quorum]);\n    const updateRoundClient = useCallback(async () => {\n        setLoading(true);\n        try {\n            setError(null);\n            const updatedRoundResponse = await updateRound(existingRound.roundId, round);\n            if (!updatedRoundResponse) {\n                throw new Error('Round creation failed');\n            }\n            if ('detail' in updatedRoundResponse) {\n                throw new Error(updatedRoundResponse.detail);\n            }\n            const updatedRound = updatedRoundResponse.data as Round;\n            setUpdatedRound(updatedRound);\n            if (needRedistribution) {\n                setStage(Stage.DISTRIBUTE);\n            } else {\n                setStage(Stage.SUCCESS);\n            }\n\n            // onAfterCreationSuccess(newRoundResponse.data as Round);\n        } catch (e) {\n            console.error(e);\n            setError((e as Error).message);\n        } finally {\n            setLoading(false);\n        }\n    }, [existingRound.roundId, needRedistribution, round, setStage, setUpdatedRound]);\n    return (<Dialog open={true}\n        sx={{\n            width: {\n                xs: '100%',\n                sm: '80%',\n            },\n            margin: 'auto',\n            '& .MuiDialog-paper': {\n                width: '100%',\n                maxWidth: '100%',\n            }\n        }}\n\n\n        slots={{\n            transition: Transition\n        }} onClose={onClose}>\n        <DialogTitle sx={{ textAlign: 'center' }} component=\"h2\" variant=\"h4\">\n            Update Round\n        </DialogTitle>\n        <DialogContent>\n            {error && <Typography variant=\"h6\" color=\"error\" sx={{ m: 2, textAlign: 'center' }}>{error}</Typography>}\n            {loading && <LoadingPopup src=\"/lottie/loading.lottie\" />}\n            <RoundEditForm {...round} loading={loading} dispatch={roundDispatch} hideAdvanced />\n        </DialogContent>\n        <DialogActions sx={{ justifyContent: 'space-between', display: 'flex', flexDirection: 'row', flexWrap: 'wrap', alignItems: 'center' }}>\n            <Button onClick={onClose} variant=\"outlined\" color=\"error\" disabled={loading}>\n                Cancel\n            </Button>\n            <Button\n                onClick={updateRoundClient}\n                variant=\"contained\"\n                color=\"success\"\n                disabled={loading}\n            >\n                <CircularProgress size={24} color=\"inherit\" sx={{ display: loading ? 'inline-block' : 'none', mr: 1 }} />\n                Update Round\n            </Button>\n        </DialogActions>\n    </Dialog>)\n}\nconst EditRound = ({ campaignId, onClose, existingRound }: { campaignId: string, onAfterCreationSuccess: (round: Round) => void, onClose: () => void, existingRound: Round }) => {\n    const [stage, setStage] = useState<Stage>(Stage.EDIT);\n\n    const [updatedRound, setUpdatedRound] = useState<Round | null>(null);\n\n    return (stage === Stage.EDIT ? <EditDialog\n        campaignId={campaignId}\n        onClose={onClose}\n        existingRound={existingRound}\n        setUpdatedRound={setUpdatedRound}\n        setStage={setStage}\n    /> : stage === Stage.DISTRIBUTE ? <DistributionDialog\n        roundId={updatedRound?.roundId || ''}\n        juries={Object.values(updatedRound?.jury || {})}\n        afterDistribution={() => {\n            // setTaskId(t.taskId);\n            // setStage(Stage.DISTRIBUTING);\n            setStage(Stage.SUCCESS);\n        }}\n        onClose={onClose}\n    /> : stage === Stage.SUCCESS ? <Dialog open={true}\n        sx={{\n            width: {\n                xs: '100%',\n                sm: '80%',\n            },\n            margin: 'auto',\n            '& .MuiDialog-paper': {\n                width: '100%',\n                maxWidth: '100%',\n            }\n        }}\n        onClose={onClose}>\n        <DialogTitle sx={{ textAlign: 'center' }} component=\"h2\" variant=\"h4\">\n            Round Updated\n        </DialogTitle>\n        <DialogContent>\n            <Typography variant=\"h6\" sx={{ m: 2, textAlign: 'center' }}>Round has been successfully updated</Typography>\n        </DialogContent>\n        <DialogActions sx={{ justifyContent: 'center', display: 'flex', flexDirection: 'row', flexWrap: 'wrap', alignItems: 'center' }}>\n            <Button onClick={onClose} variant=\"contained\" color=\"success\">\n                Close\n            </Button>\n        </DialogActions>\n    </Dialog>\n        : null\n    )\n}\n\nexport default EditRound","import LottieWrapper from \"./LottieWrapper\";\n\nconst LoadingPopup = ({ src = '/lottie/loading.lottie' }: { src?: string, message?: string }) => (\n    <div className=\"loading-popup fixed top-0 left-0 w-full h-full bg-transparent z-50 flex items-center justify-center flex-col backdrop-blur-[2px]\">\n        <LottieWrapper src={src} />\n    </div>\n)\nexport default LoadingPopup;\n"],"names":["initialRoundCreate","allowedMediaTypes","MediaType","IMAGE","AUDIO","VIDEO","type","EvaluationType","BINARY","startDate","dayjs","toISOString","endDate","name","description","isPublicJury","allowJuryToParticipate","campaignId","jury","isOpen","serial","allowMultipleJudgement","secretBallot","blacklist","audioMinimumDurationMilliseconds","audioMinimumSizeBytes","videoMinimumDurationMilliseconds","videoMinimumSizeBytes","videoMinimumResolution","imageMinimumResolution","imageMinimumSizeBytes","maximumSubmissionOfSameArticle","articleAllowExpansions","articleAllowCreations","articleMinimumTotalBytes","articleMinimumTotalWords","articleMinimumAddedBytes","articleMinimumAddedWords","quorum","state","action","RoundEditForm","lazy","Transition","React","ref","Slide","direction","props","Stage","EditDialog","onClose","existingRound","setUpdatedRound","setStage","round","roundDispatch","useReducer","roundCreateReducer","Object","values","loading","setLoading","useState","error","setError","needRedistribution","useMemo","existingJury","Set","length","size","newJury","intersection","updateRoundClient","useCallback","updatedRoundResponse","updateRound","roundId","detail","updatedRound","data","e","console","message","Dialog","open","sx","width","xs","sm","margin","maxWidth","slots","transition","DialogTitle","textAlign","component","variant","DialogContent","Typography","color","m","LoadingPopup","src","dispatch","hideAdvanced","DialogActions","justifyContent","display","flexDirection","flexWrap","alignItems","Button","onClick","disabled","CircularProgress","mr","EditRound","stage","DistributionDialog","juries","afterDistribution","div","className","LottieWrapper"],"sourceRoot":""}
{"version":3,"file":"4177.js","mappings":"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","sources":["webpack://campwiz-frontend/./types/round/create.ts","webpack://campwiz-frontend/?e629","webpack://campwiz-frontend/./app/campaign/[campaignId]/RoundCreate.tsx","webpack://campwiz-frontend/./components/LoadingPopup.tsx"],"sourcesContent":["import dayjs from \"dayjs\"\nimport { EvaluationType, MediaType, RoundCreate } from \".\"\n\nexport const initialRoundCreate: RoundCreate = {\n    allowedMediaTypes: [\n        MediaType.IMAGE,\n        MediaType.AUDIO,\n        MediaType.VIDEO,\n    ],\n    type: EvaluationType.BINARY,\n    startDate: dayjs().toISOString(),\n    endDate: dayjs().toISOString(),\n    name: \"\",\n    description: \"\",\n    isPublicJury: false,\n    allowJuryToParticipate: true,\n    campaignId: \"\", // Add appropriate initial value\n    jury: [], // Add appropriate initial value\n    isOpen: false,\n    serial: 0,\n    allowMultipleJudgement: true,\n    secretBallot: true,\n    blacklist: \"\",\n    audioMinimumDurationMilliseconds: 0,\n    audioMinimumSizeBytes: 0,\n    videoMinimumDurationMilliseconds: 0,\n    videoMinimumSizeBytes: 0,\n    videoMinimumResolution: 0,\n    imageMinimumResolution: 2000000, // 2MP\n    imageMinimumSizeBytes: 0,\n    maximumSubmissionOfSameArticle: 1,\n    articleAllowExpansions: true,\n    articleAllowCreations: true,\n    articleMinimumTotalBytes: 0,\n    articleMinimumTotalWords: 0,\n    articleMinimumAddedBytes: 0,\n    articleMinimumAddedWords: 0,\n    quorum: 1,\n}\n\nexport const roundCreateReducer = (state: RoundCreate, action: Partial<RoundCreate>) => {\n    return {\n        ...state,\n        ...action\n    }\n}\nexport type RoundCreateAction = Partial<RoundCreate>\nexport type RoundCreateDispatch = (action: RoundCreateAction) => void","import { createServerReference, callServer, findSourceMapURL } from 'private-next-rsc-action-client-wrapper'\nexport default /*#__PURE__*/createServerReference(\"7f1b6e866ea2fda93baccb982ad43339f3fe664fa5\", callServer, undefined, findSourceMapURL, \"default\")","\"use client\";\nimport { Button, Dialog, DialogActions, DialogContent, DialogTitle, Typography } from \"@mui/material\"\nimport createRound from \"@/app/campaign/[campaignId]/round/new/action\"\nimport React, { lazy, useCallback, useMemo, useReducer, useState } from \"react\";\nimport { roundCreateReducer, initialRoundCreate } from \"@/types/round/create\";\nimport { Round } from \"@/types/round\";\nimport LoadingPopup from \"@/components/LoadingPopup\";\nconst RoundEditForm = lazy(() => import(\"@/components/round/RoundEditForm\"));\nimport Slide from '@mui/material/Slide';\nimport { TransitionProps } from '@mui/material/transitions';\nimport DistributionStatusThingy from \"./round/distribute/distributingStatusSthingy\";\nimport ImportFromCommonsDialog from \"./round/import/commons/_page\";\nimport startDistributionTask from \"./round/distribute/startDistributionTask\";\nimport ImportFromRoundDialog from \"./round/import/round/_page\";\nimport { Task } from \"@/app/task\";\nimport { ImportSuccess } from \"./round/import/commons/importWidget\";\n\nconst Transition = React.forwardRef(function Transition(\n    props: TransitionProps & {\n        children: React.ReactElement<unknown, typeof Slide>;\n    },\n    ref: React.Ref<unknown>,\n) {\n    return <Slide direction=\"up\" ref={ref} {...props} />;\n});\nenum Stage {\n    CREATE = 'create',\n    IMPORT = 'import',\n    DISTRIBUTE = 'distribute',\n    SUCCESS = 'success'\n}\nconst CreateRound = ({ campaignId, onClose }: { campaignId: string, onAfterCreationSuccess: (round: Round) => void, onClose: () => void }) => {\n    const [round, roundDispatch] = useReducer(roundCreateReducer, { ...initialRoundCreate, campaignId });\n    const [loading, setLoading] = useState(false);\n    const [error, setError] = useState<string | null>(null);\n    const [stage, setStage] = useState<Stage>(Stage.CREATE);\n    const [taskId, setTaskId] = useState<string>('');\n    const [latestTask, setLatestTask] = useState<Task | null>(null);\n\n    const [createdRound, setCreatedRound] = useState<Round | null>(null);\n    const createRoundClient = useCallback(async () => {\n        setLoading(true);\n        try {\n            setError(null);\n            round.articleMinimumAddedBytes = 1 * round.articleMinimumAddedBytes;\n            round.articleMinimumAddedWords = 1 * round.articleMinimumAddedWords;\n            round.articleMinimumTotalBytes = 1 * round.articleMinimumTotalBytes;\n            round.articleMinimumTotalWords = 1 * round.articleMinimumTotalWords;\n            // Image\n            round.imageMinimumSizeBytes = 1 * round.imageMinimumSizeBytes;\n            round.imageMinimumResolution = 1 * round.imageMinimumResolution;\n            // Video\n            round.videoMinimumSizeBytes = 1 * round.videoMinimumSizeBytes;\n            round.videoMinimumResolution = 1 * round.videoMinimumResolution;\n            round.videoMinimumDurationMilliseconds = 1 * round.videoMinimumDurationMilliseconds;\n            // Audio\n            round.audioMinimumSizeBytes = 1 * round.audioMinimumSizeBytes;\n            round.audioMinimumDurationMilliseconds = 1 * round.audioMinimumDurationMilliseconds;\n            const newRoundResponse = await createRound(round);\n            if (!newRoundResponse) {\n                throw new Error('Round creation failed');\n            }\n            if ('detail' in newRoundResponse) {\n                throw new Error(newRoundResponse.detail);\n            }\n            const newround = newRoundResponse.data as Round;\n            setCreatedRound(newround);\n            setStage(Stage.IMPORT);\n            // const taskResponse = await startImportTask(newround.roundId, ['Bangladesh']);\n            // if ('detail' in taskResponse) {\n            //     throw new Error(taskResponse.detail);\n            // }\n            // setTaskId(taskResponse.data.taskId);\n            // setStage(Stage.IMPORT);\n\n            // onAfterCreationSuccess(newRoundResponse.data as Round);\n        } catch (e) {\n            console.error(e);\n            setError((e as Error).message);\n        } finally {\n            setLoading(false);\n        }\n    }, [round]);\n    const distribute = useCallback(async (t: Task) => {\n        setLatestTask(t);\n        if (!createdRound) {\n            throw new Error('Round not created yet');\n        }\n        if (createdRound.isPublicJury) {\n            setStage(Stage.SUCCESS);\n            return;\n        }\n        setStage(Stage.DISTRIBUTE);\n        const distributionTask = await startDistributionTask(createdRound.roundId, round.jury);\n        if ('detail' in distributionTask) {\n            throw new Error(distributionTask.detail);\n        }\n        setTaskId(distributionTask.data.taskId);\n    }, [createdRound, round.jury]);\n    const afterCreatedRound = useMemo(() => {\n        if (!createdRound) {\n            return null;\n        }\n        if (stage === Stage.IMPORT) {\n            if (createdRound.dependsOnRoundId) {\n                return <ImportFromRoundDialog round={createdRound} distribute={distribute} onClose={onClose} />;\n            } else {\n                return <ImportFromCommonsDialog round={createdRound} onClose={onClose} distribute={distribute} />;\n            }\n        }\n        if (stage === Stage.SUCCESS) {\n            if (latestTask)\n                return <ImportSuccess onClose={onClose} round={createdRound} task={latestTask} />;\n        }\n        return null\n    }, [createdRound, distribute, latestTask, onClose, stage])\n    return (createdRound && afterCreatedRound) ? afterCreatedRound\n        : (<Dialog open={true}\n            sx={{\n                width: {\n                    xs: '100%',\n                    sm: '80%',\n                },\n                margin: 'auto',\n                '& .MuiDialog-paper': {\n                    width: '100%',\n                    maxWidth: '100%',\n                }\n            }}\n            slots={{\n                transition: Transition\n            }} onClose={onClose}>\n            <DialogTitle>\n                Create a new round\n            </DialogTitle>\n            <DialogContent>\n                {error && <Typography variant=\"h6\" color=\"error\" sx={{ m: 2, textAlign: 'center' }}>{error}</Typography>}\n                {loading && <LoadingPopup src=\"/lottie/loading.lottie\" />}\n                {stage === Stage.CREATE && <RoundEditForm {...round} loading={loading} dispatch={roundDispatch} />}\n                {stage === Stage.DISTRIBUTE && <DistributionStatusThingy taskId={taskId} onSuccess={console.log} />}\n            </DialogContent>\n            <DialogActions sx={{ justifyContent: 'space-between', display: 'flex', flexDirection: 'row', flexWrap: 'wrap', alignItems: 'center' }}>\n                <Button onClick={onClose} variant=\"outlined\" color=\"error\" disabled={loading}>\n                    Cancel\n                </Button>\n                {stage === Stage.CREATE ? <Button\n                    onClick={createRoundClient}\n                    variant=\"contained\"\n                    color=\"success\"\n                    disabled={loading}\n                    loading={loading}\n                >\n                    Create Round\n                </Button>\n                    : <Button\n                        onClick={onClose}\n                        variant=\"contained\"\n                        color=\"error\"\n                        disabled={loading}\n                    >\n                        Close\n                    </Button>}\n\n            </DialogActions>\n        </Dialog>\n        )\n}\n\nexport default CreateRound","import LottieWrapper from \"./LottieWrapper\";\n\nconst LoadingPopup = ({ src = '/lottie/loading.lottie' }: { src?: string, message?: string }) => (\n    <div className=\"loading-popup fixed top-0 left-0 w-full h-full bg-transparent z-50 flex items-center justify-center flex-col backdrop-blur-[2px]\">\n        <LottieWrapper src={src} />\n    </div>\n)\nexport default LoadingPopup;\n"],"names":["initialRoundCreate","allowedMediaTypes","MediaType","IMAGE","AUDIO","VIDEO","type","EvaluationType","BINARY","startDate","dayjs","toISOString","endDate","name","description","isPublicJury","allowJuryToParticipate","campaignId","jury","isOpen","serial","allowMultipleJudgement","secretBallot","blacklist","audioMinimumDurationMilliseconds","audioMinimumSizeBytes","videoMinimumDurationMilliseconds","videoMinimumSizeBytes","videoMinimumResolution","imageMinimumResolution","imageMinimumSizeBytes","maximumSubmissionOfSameArticle","articleAllowExpansions","articleAllowCreations","articleMinimumTotalBytes","articleMinimumTotalWords","articleMinimumAddedBytes","articleMinimumAddedWords","quorum","roundCreateReducer","state","action","RoundEditForm","lazy","Transition","React","props","ref","Slide","direction","Stage","onClose","round","roundDispatch","useReducer","loading","setLoading","useState","error","setError","stage","setStage","taskId","setTaskId","latestTask","setLatestTask","createdRound","setCreatedRound","createRoundClient","useCallback","newRoundResponse","createRound","detail","newround","data","e","console","message","distribute","t","distributionTask","startDistributionTask","roundId","Error","afterCreatedRound","useMemo","dependsOnRoundId","ImportFromRoundDialog","ImportFromCommonsDialog","ImportSuccess","task","Dialog","open","sx","width","xs","sm","margin","maxWidth","slots","transition","DialogTitle","DialogContent","Typography","variant","color","m","textAlign","LoadingPopup","src","dispatch","DistributionStatusThingy","onSuccess","log","DialogActions","justifyContent","display","flexDirection","flexWrap","alignItems","Button","onClick","disabled","div","className","LottieWrapper"],"sourceRoot":""}